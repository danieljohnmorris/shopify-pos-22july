{
  "version": 3,
  "sources": ["../../../index.js"],
  "sourcesContent": ["// Simple Lambda handler for API Gateway V2\nexport const handler = async (event) => {\n  console.log('Event:', JSON.stringify(event, null, 2));\n  \n  const { requestContext, body, queryStringParameters, headers } = event;\n  const { http } = requestContext;\n  const { method, path } = http;\n  \n  // CORS headers\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Content-Type': 'application/json'\n  };\n  \n  try {\n    // Handle OPTIONS requests for CORS\n    if (method === 'OPTIONS') {\n      return {\n        statusCode: 200,\n        headers: corsHeaders,\n        body: ''\n      };\n    }\n    \n    // Route handling\n    if (method === 'GET' && path === '/') {\n      return {\n        statusCode: 200,\n        headers: corsHeaders,\n        body: JSON.stringify({\n          message: 'Hello World!',\n          server: 'Lambda with SST ApiGatewayV2',\n          timestamp: new Date().toISOString(),\n          https: true\n        })\n      };\n    }\n    \n    if (method === 'GET' && path === '/health') {\n      return {\n        statusCode: 200,\n        headers: corsHeaders,\n        body: JSON.stringify({\n          status: 'healthy',\n          uptime: process.uptime(),\n          timestamp: new Date().toISOString(),\n          https: true\n        })\n      };\n    }\n    \n    if (method === 'GET' && path === '/api/users') {\n      return {\n        statusCode: 200,\n        headers: corsHeaders,\n        body: JSON.stringify([\n          { id: 1, name: 'Alice', email: 'alice@example.com' },\n          { id: 2, name: 'Bob', email: 'bob@example.com' }\n        ])\n      };\n    }\n    \n    if (method === 'POST' && path === '/api/data') {\n      const requestBody = body ? JSON.parse(body) : {};\n      return {\n        statusCode: 200,\n        headers: corsHeaders,\n        body: JSON.stringify({\n          message: 'Data received successfully',\n          receivedData: requestBody,\n          timestamp: new Date().toISOString(),\n          https: true\n        })\n      };\n    }\n    \n    // 404 for unmatched routes\n    return {\n      statusCode: 404,\n      headers: corsHeaders,\n      body: JSON.stringify({\n        error: 'Not Found',\n        message: `Route ${method} ${path} not found`,\n        timestamp: new Date().toISOString()\n      })\n    };\n    \n  } catch (error) {\n    console.error('Lambda error:', error);\n    return {\n      statusCode: 500,\n      headers: corsHeaders,\n      body: JSON.stringify({\n        error: 'Internal Server Error',\n        message: error.message,\n        timestamp: new Date().toISOString()\n      })\n    };\n  }\n};\n\n// Local development server (only runs when not in Lambda environment)\nif (process.env.NODE_ENV !== 'production' && typeof process !== 'undefined' && process.argv[1] === new URL(import.meta.url).pathname) {\n  const PORT = process.env.PORT || 3000;\n  \n  // Simple HTTP server for local testing\n  const http = await import('http');\n  const url = await import('url');\n  \n  const server = http.createServer(async (req, res) => {\n    const parsedUrl = url.parse(req.url, true);\n    \n    // Mock API Gateway V2 event structure\n    const event = {\n      requestContext: {\n        http: {\n          method: req.method,\n          path: parsedUrl.pathname\n        }\n      },\n      queryStringParameters: parsedUrl.query,\n      headers: req.headers,\n      body: null\n    };\n    \n    // Get request body for POST requests\n    if (req.method === 'POST') {\n      let body = '';\n      req.on('data', chunk => {\n        body += chunk.toString();\n      });\n      req.on('end', async () => {\n        event.body = body;\n        const response = await handler(event);\n        \n        res.writeHead(response.statusCode, response.headers);\n        res.end(response.body);\n      });\n    } else {\n      const response = await handler(event);\n      \n      res.writeHead(response.statusCode, response.headers);\n      res.end(response.body);\n    }\n  });\n  \n  server.listen(PORT, () => {\n    console.log(`Local server running on http://localhost:${PORT}`);\n    console.log(`Health check: http://localhost:${PORT}/health`);\n  });\n}\n"],
  "mappings": "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",
  "names": []
}
